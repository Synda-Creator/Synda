# synda/twitter_handler.py
import tweepy
from ai_functions import generate_response
from data_processor import preprocess_tweet
from sentiment_analyzer import analyze_sentiment
from utils import print_letter_by_letter
from logger import setup_logger

logger = setup_logger("TwitterHandler")

class SyndaStreamListener(tweepy.StreamListener):
    def __init__(self, api, config):
        super().__init__()
        self.api = api
        self.me = api.me()
        self.config = config

    def on_status(self, tweet):
        logger.info(f"Processing tweet from @{tweet.user.screen_name}")
        
        if tweet.in_reply_to_status_id is not None or tweet.user.id == self.me.id:
            return
        
        if not tweet.favorited:
            try:
                tweet.favorite()
            except Exception as e:
                logger.error(f"Error on fav: {e}")

        print_letter_by_letter(f"Incoming tweet from @{tweet.user.screen_name}: {tweet.text}")
        
        preprocessed_tweet = preprocess_tweet(tweet.text)
        sentiment = analyze_sentiment(preprocessed_tweet)
        
        response = generate_response(preprocessed_tweet, sentiment)
        print_letter_by_letter(f"AI response: {response}")
        
        if response:
            try:
                self.api.update_status(
                    status=f"@{tweet.user.screen_name} {response}",
                    in_reply_to_status_id=tweet.id,
                )
                logger.info(f"Replied to @{tweet.user.screen_name}")
            except Exception as e:
                logger.error(f"Error on reply: {e}")

        print("\n" + "-"*50 + "\n")

    def on_error(self, status):
        logger.error(f"Error: {status}")

class TwitterHandler:
    def __init__(self, config):
        self.config = config
        self.api = self.authenticate_to_twitter()

    def authenticate_to_twitter(self):
        auth = tweepy.OAuthHandler(
            self.config.TWITTER_CONSUMER_KEY, 
            self.config.TWITTER_CONSUMER_SECRET
        )
        auth.set_access_token(
            self.config.TWITTER_ACCESS_TOKEN, 
            self.config.TWITTER_ACCESS_TOKEN_SECRET
        )
        return tweepy.API(auth)

    def start_stream(self):
        tweets_listener = SyndaStreamListener(self.api, self.config)
        stream = tweepy.Stream(self.api.auth, tweets_listener)
        stream.filter(track=[f"@{self.config.TWITTER_HANDLE}"], languages=["en"])
